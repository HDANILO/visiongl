

#
# makefile for visiongl
#
# ddantas 5/7/2013
#

BINARY_NAME          = visiongl
CUDA_NAME            = vglcuda
FRACTAL_NAME         = fractal
CAM_NAME             = cam
GDCM_NAME            = gdcm
DCMTK_NAME           = dcmtk
CL3D_NAME            = cl3d
BENCHMARK_CV_NAME    = benchmark_cv
BENCHMARK_CVOCL_NAME = benchmark_cvocl
BENCHMARK_CL_NAME    = benchmark_cl
BENCHMARK_CL3D_NAME  = benchmark_cl3d
COLORDECONV_NAME     = colordeconv

ROOTPATH           = .
INCLUDE_PATH       = $(ROOTPATH)/src
INCLUDE_DIR        = -I $(INCLUDE_PATH)

OUTPUT_ROOTPATH    = $(ROOTPATH)
OUTPUT_INCLUDEPATH = $(OUTPUT_ROOTPATH)/include
OUTPUT_LIBPATH     = $(OUTPUT_ROOTPATH)/lib
OUTPUT_BINPATH     = $(OUTPUT_ROOTPATH)/bin
OUTPUT_INCLUDEDIR  = -I $(OUTPUT_INCLUDEPATH)
OUTPUT_LIBDIR      = -L $(OUTPUT_LIBPATH)


OPENCV_PATH        = /usr/local/opencv
OPENCV_INCLUDEPATH = $(OPENCV_PATH)/include/
OPENCV_LIBPATH     = $(OPENCV_PATH)/lib
OPENCV_INCLUDEDIR  = -I $(OPENCV_INCLUDEPATH)
OPENCV_LIBDIR      = -L $(OPENCV_LIBPATH)
OPENCV_LIBRARIES   = -lopencv_highgui -lopencv_core -lopencv_imgproc -lopencv_legacy


WITH_CUDA = 1
WITH_OPENCL = 1
WITH_GDCM = 0
WITH_DCMTK = 0

ifeq ($(WITH_OPENCL), 1)
	OPENCL_DEF        = -D__OPENCL__
endif

ifeq ($(WITH_CUDA), 1)
	CUDA_DEF         = -D__CUDA__
	CUDA_PATH        = /usr/local/cuda
	CUDA_INCLUDEPATH = $(CUDA_PATH)/include
	CUDA_LIBPATH     = $(CUDA_PATH)/lib64
	CUDA_INCLUDEDIR  = -I $(CUDA_INCLUDEPATH)
	CUDA_LIBDIR      = -L $(CUDA_LIBPATH)
	CUDA_LIBRARIES   = -lcudart
	CUDA_OPTIONS     = -Xcompiler
	CUDA_FILES       = src/*.cu     
	CC               = $(CUDA_PATH)/bin/nvcc 
else
	CC              = g++
endif

ifeq ($(WITH_OPENCL), 1)
        OPENCL_PATH        = /usr/local/cuda/
        OPENCL_PATH        = /opt/intel/opencl-1.2-4.4.0.117/lib64/
        OPENCL_PATH        = /opt/AMDAPP
        OPENCL_INCLUDEPATH = $(OPENCL_PATH)/include/
        OPENCL_LIBPATH     = $(OPENCL_PATH)/lib/x86_64
        #OPENCL_LIBPATH     = /usr/lib/
        OPENCL_INCLUDEDIR  = -I $(OPENCL_INCLUDEPATH)
        OPENCL_LIBDIR      = -L $(OPENCL_LIBPATH)
        OPENCL_LIBRARIES   = -lOpenCL
        OPENCL_FILES = src/cl2cpp_shaders.cpp src/cl2cpp_MM.cpp src/vglClImage.cpp
endif

ifeq ($(WITH_GDCM), 1)
	GDCM_DEF         = -D__GDCM__
	GDCM_PATH        = /usr/local/gdcm
	GDCM_INCLUDEPATH = $(GDCM_PATH)/include/gdcm-2.4
	GDCM_LIBPATH     = $(GDCM_PATH)/lib
	GDCM_INCLUDEDIR  = -I $(GDCM_INCLUDEPATH)
	GDCM_LIBDIR      = -L $(GDCM_LIBPATH)
	GDCM_LIBRARIES   = -lgdcmcharls -lgdcmCommon -lgdcmDICT -lgdcmDSED -lgdcmexpat -lgdcmIOD -lgdcmjpeg8 -lgdcmjpeg12 -lgdcmjpeg16 -lgdcmMEXD -lgdcmMSFF -lgdcmopenjpeg -lgdcmuuid -lgdcmzlib -lsocketxx
endif

ifeq ($(WITH_DCMTK), 1)
	DCMTK_DEF         = -D__DCMTK__
	DCMTK_PATH        = /usr/local/dcmtk
	DCMTK_INCLUDEPATH = $(DCMTK_PATH)/include
	DCMTK_LIBPATH     = $(DCMTK_PATH)/lib
	DCMTK_INCLUDEDIR  = -I $(DCMTK_INCLUDEPATH)
	DCMTK_LIBDIR      = -L $(DCMTK_LIBPATH)
	DCMTK_LIBRARIES   = -ldcmjpeg -lijg8 -lijg12  -lijg16 -ldcmimage -ldcmpstat -ldcmimgle -ldcmqrdb -ldcmnet -ldcmdata -loflog -lofstd -lz -lpthread 
        #-ltiff -lpng
endif


VGL_FILES = src/glsl2cpp_shaders.cpp src/vglContext.cpp src/vglSimpleBGModel.cpp src/glsl2cpp_BG.cpp src/glsl2cpp_Stereo.cpp src/vglImage.cpp src/vglLoadShader.cpp src/vglGdcmIo.cpp src/vglDcmtkIo.cpp src/vglDeconv.cpp


INSTALL_PATH        = $(HOME)/script
INSTALL_INCLUDEPATH = $(INSTALL_PATH)/include
INSTALL_LIBPATH     = $(INSTALL_PATH)/lib

OPENGL_LIBDIR = -L /usr/X11R6/lib

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$(CUDA_LIBPATH):$(OPENCV_LIBPATH):$(INSTALL_LIBPATH):$(GDCM_LIBPATH):$(DCMTK_LIBPATH)


COMPILER_FLAGS   = -g -pg -DGL_GLEXT_PROTOTYPES -DGLX_GLXEXT_PROTOTYPES 
OPENGL_LIBRARIES    = -lGLEW -lGLU -lGL -lglut 


LINUXAMD64_DIRS_LIBS =  $(INCLUDE_DIR) \
                        $(OUTPUT_LIBDIR) \
                        $(OPENGL_LIBDIR) \
                        $(OPENGL_LIBRARIES) \
                        $(OPENCV_INCLUDEDIR) \
                        $(OPENCV_LIBDIR) \
                        $(OPENCV_LIBRARIES) \
                        $(CUDA_DEF) \
                        $(CUDA_INCLUDEDIR) \
                        $(CUDA_LIBDIR) \
                        $(CUDA_LIBRARIES)\
                        $(OPENCL_DEF) \
                        $(OPENCL_INCLUDEDIR) \
                        $(OPENCL_LIBDIR) \
                        $(OPENCL_LIBRARIES) \
                        $(GDCM_DEF) \
                        $(GDCM_INCLUDEDIR) \
                        $(GDCM_LIBDIR) \
                        $(GDCM_LIBRARIES) \
			$(DCMTK_DEF) \
                        $(DCMTK_INCLUDEDIR) \
			$(DCMTK_LIBDIR) \
                        $(DCMTK_LIBRARIES) \


LINUXAMD64_LIB = $(CC) $(COMPILER_FLAGS) \
                        -shared $(CUDA_OPTIONS) -fPIC \
                        -o $(OUTPUT_LIBPATH)/lib$(BINARY_NAME).so \
                          $(CUDA_FILES) $(VGL_FILES) $(OPENCL_FILES) \
                         $(LINUXAMD64_DIRS_LIBS) $(CUDA_DIRS_LIBS) 

LINUXAMD64_DEMO_CL3D = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(CL3D_NAME) \
                         src/demo/$(CL3D_NAME).cpp \
                         -lvisiongl \
                         $(LINUXAMD64_DIRS_LIBS)

LINUXAMD64_DEMO_FRACTAL = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(FRACTAL_NAME) \
                         src/demo/$(FRACTAL_NAME).cpp \
                         -lvisiongl \
                         $(LINUXAMD64_DIRS_LIBS)

LINUXAMD64_DEMO_CAM = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(CAM_NAME) \
                         src/demo/$(CAM_NAME).cpp \
                         -lvisiongl \
                         $(LINUXAMD64_DIRS_LIBS)

LINUXAMD64_DEMO_GDCM = $(CC) $(COMPILER_FLAGS) -D__GDCM__ \
                         -o $(OUTPUT_BINPATH)/demo_$(GDCM_NAME) \
                          src/demo/$(GDCM_NAME).cpp \
                         -lvisiongl \
                          $(LINUXAMD64_DIRS_LIBS) \

LINUXAMD64_DEMO_DCMTK = $(CC) $(COMPILER_FLAGS) -D__DCMTK__ \
                         -o $(OUTPUT_BINPATH)/demo_$(DCMTK_NAME) \
                          src/demo/$(DCMTK_NAME).cpp \
                         -lvisiongl \
                          $(LINUXAMD64_DIRS_LIBS) \

ifeq ($(WITH_OPENCL), 1)
        LINUXAMD64_DEMO_BENCHMARK_CL = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(BENCHMARK_CL_NAME) \
                         src/demo/$(BENCHMARK_CL_NAME).cpp src/demo/timer.cpp \
                         -lvisiongl \
                         $(LINUXAMD64_DIRS_LIBS) \

        LINUXAMD64_DEMO_BENCHMARK_CL3D = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(BENCHMARK_CL3D_NAME) \
                         src/demo/$(BENCHMARK_CL3D_NAME).cpp src/demo/timer.cpp \
                         -lvisiongl \
                         $(LINUXAMD64_DIRS_LIBS) \

endif

LINUXAMD64_DEMO_BENCHMARK_CV = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(BENCHMARK_CV_NAME) \
                         src/demo/$(BENCHMARK_CV_NAME).cpp src/demo/timer.cpp \
                         -lvisiongl \
                         $(LINUXAMD64_DIRS_LIBS) \

LINUXAMD64_DEMO_BENCHMARK_CVOCL = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(BENCHMARK_CVOCL_NAME) \
                         src/demo/$(BENCHMARK_CVOCL_NAME).cpp src/demo/timer.cpp \
                         -lvisiongl -lopencv_ocl \
                         $(LINUXAMD64_DIRS_LIBS) \

LINUXAMD64_DEMO_COLORDECONV = $(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/demo_$(COLORDECONV_NAME) \
                         src/demo/$(COLORDECONV_NAME).cpp \
                         -lvisiongl \
                         $(LINUXAMD64_DIRS_LIBS)




GENERATE_HEADER = cat $(INCLUDE_PATH)/vglHead.h $(INCLUDE_PATH)/vglImage.h $(INCLUDE_PATH)/vglCudaImage.h $(INCLUDE_PATH)/vglClImage.h $(INCLUDE_PATH)/vglGdcmIo.h $(INCLUDE_PATH)/vglDcmtkIo.h $(INCLUDE_PATH)/vglContext.h $(INCLUDE_PATH)/vglSimpleBGModel.h $(INCLUDE_PATH)/glsl2cpp*.h $(INCLUDE_PATH)/kernel2cu*.h $(INCLUDE_PATH)/cl2cpp*.h $(INCLUDE_PATH)/vglTail.h $(INCLUDE_PATH)/vglDeconv.h > /tmp/$(BINARY_NAME).h; grep -v vglImage\.h /tmp/$(BINARY_NAME).h > $(OUTPUT_INCLUDEPATH)/$(BINARY_NAME).h


all:
	echo $(LD_LIBRARY_PATH)
	$(GENERATE_HEADER)
	$(LINUXAMD64_LIB)

lib:
	$(LINUXAMD64_LIB)

install: all
	mkdir -p $(OUTPUT_INCLUDEPATH)
	mkdir -p $(OUTPUT_LIBPATH)
	mkdir -p $(INSTALL_INCLUDEPATH)
	mkdir -p $(INSTALL_LIBPATH)
	cp $(OUTPUT_INCLUDEPATH)/$(BINARY_NAME).h $(INSTALL_INCLUDEPATH)
	cp $(OUTPUT_LIBPATH)/lib$(BINARY_NAME).so $(INSTALL_LIBPATH)

dox: all
	doxygen $(BINARY_NAME).dox
	cd dox/latex; pwd; make; xdvi refman.dvi&

demofrac:
	$(LINUXAMD64_DEMO_FRACTAL)

democam:
	$(LINUXAMD64_DEMO_CAM)

demogdcm:
	$(LINUXAMD64_DEMO_GDCM)

demodcmtk:
	$(LINUXAMD64_DEMO_DCMTK)

democl3d:
	$(LINUXAMD64_DEMO_CL3D)

demobenchmark:
	$(LINUXAMD64_DEMO_BENCHMARK_CV)
	#$(LINUXAMD64_DEMO_BENCHMARK_CVOCL)
	$(LINUXAMD64_DEMO_BENCHMARK_CL)
	$(LINUXAMD64_DEMO_BENCHMARK_CL3D)

democolordeconv:
	$(LINUXAMD64_DEMO_COLORDECONV)

.PHONY: lib


rundemocl3d:
	cd $(OUTPUT_BINPATH); ./demo_$(CL3D_NAME) ../images/dicom/0003.dcm.%d.PGM 0 16 /tmp

rundemofrac:
	cd $(OUTPUT_BINPATH); ./demo_$(FRACTAL_NAME)

rundemocam:
	cd $(OUTPUT_BINPATH); ./demo_$(CAM_NAME)

rundemogdcm:
	cd $(OUTPUT_BINPATH); ./demo_$(GDCM_NAME) ../images/dicom/0003.dcm /tmp/outputgdcm.dcm  
	#cd $(OUTPUT_BINPATH); ./demo_$(GDCM_NAME) ../images/dicom/esopecho.dcm /tmp/outputgdcmrgb.dcm -c 
	#cd $(OUTPUT_BINPATH); ./demo_$(GDCM_NAME) ../images/dicom/I_000032.dcm /tmp/outputgdcmybr.dcm -c
	#cd $(OUTPUT_BINPATH); ./demo_$(GDCM_NAME) ../images/dicom/0003.dcm.%d.PGM /tmp/outputgdcmheader.dcm 0 3  
	#cd $(OUTPUT_BINPATH); ./demo_$(GDCM_NAME) ../images/dicom/I_000003.dcm.%d.PGM /tmp/outputgdcmheadercor.dcm 0 3 -c 
	#cd $(OUTPUT_BINPATH); ./demo_$(GDCM_NAME) /home/davy/Desktop/imageTest/16bits/E1154S7I.dcm /tmp/outputgdcm16.dcm -c  
	#cd $(OUTPUT_BINPATH); ./demo_$(GDCM_NAME) /tmp/outputgdcm16.dcm /tmp/outputgdcm16verif.dcm

rundemodcmtk:
	cd $(OUTPUT_BINPATH); ./demo_$(DCMTK_NAME) ../images/dicom/0003.dcm /tmp/outputdcmtk.dcm -c
	#cd $(OUTPUT_BINPATH); ./demo_$(DCMTK_NAME) ../images/dicom/esopecho.dcm /tmp/outputdcmtkrgb.dcm -c 
	#cd $(OUTPUT_BINPATH); ./demo_$(DCMTK_NAME) ../images/dicom/I_000032.dcm /tmp/outputdcmtkybr.dcm -c
	#cd $(OUTPUT_BINPATH); ./demo_$(DCMTK_NAME) ../images/dicom/0003.dcm.%d.PGM /tmp/outputdcmtkheader.dcm 0 3 -c
	#cd $(OUTPUT_BINPATH); ./demo_$(DCMTK_NAME) ../images/dicom/I_000003.dcm.%d.PGM /tmp/outputdcmtkheadercor.dcm 0 3 -c
	#cd $(OUTPUT_BINPATH); ./demo_$(DCMTK_NAME) /home/davy/Desktop/imageTest/16bits/E1154S7I.dcm /tmp/outputdcmtk16.dcm -c

rundemobenchmark:
	cd $(OUTPUT_BINPATH); ./demo_$(BENCHMARK_CV_NAME) ../images/lena_std.tif 10 /tmp
	#cd $(OUTPUT_BINPATH); ./demo_$(BENCHMARK_CVOCL_NAME) ../images/lena_std.tif 10 /tmp
	cd $(OUTPUT_BINPATH); ./demo_$(BENCHMARK_CL_NAME) ../images/lena_std.tif 10 /tmp
	cd $(OUTPUT_BINPATH); ./demo_$(BENCHMARK_CL3D_NAME) ../images/dicom/0003.dcm.%d.PGM 0 16 10 /tmp

rundemocolordeconv:
	cd $(OUTPUT_BINPATH); ./demo_$(COLORDECONV_NAME) ../images/Emphysema_H_and_E.jpg 1 /tmp/image.%d.pgm 0.0 1.0 1.0 1.0 0.0 1.0 1.0 1.0 0.0

cuda:
	./kernel2cu.pl -o src/kernel2cu_shaders src/CUDA/*.kernel

frag:
	./glsl2cpp.pl -o src/glsl2cpp_shaders -p FS src/FS/*.frag

frag_bg:
	./glsl2cpp.pl -o src/glsl2cpp_BG -p FS_BG src/FS_BG/*.frag

frag_stereo:
	./glsl2cpp.pl -o src/glsl2cpp_Stereo -p FS_Stereo src/FS_Stereo/*.frag

frag_diffeq:
	./glsl2cpp.pl -o src/glsl2cpp_DiffEq -p FS_DiffEq src/FS_DiffEq/*.frag

cl:
	./cl2cpp.pl -o src/cl2cpp_shaders -p CL src/CL/*.cl

cl_mm:
	./cl2cpp.pl -o src/cl2cpp_MM -p CL src/CL_MM/*.cl

run:
	cd $(OUTPUT_BINPATH); ./$(BINARY_NAME)

runtestcam:
	cd $(OUTPUT_BINPATH); ./$(TESTCAM_NAME)

debug:
	cd $(OUTPUT_BINPATH); ddd ./$(BINARY_NAME)

bkp:
	rm -f bkp.tgz
	tar -cvzf bkp.tgz *


CLOUD_DIRS   := src/cloud
CLOUD_SOURCE := $(foreach dir, $(CLOUD_DIRS), $(wildcard $(dir)/*))
CLOUD_BIN     = $(CLOUD_SOURCE:%.cpp=%)
CLOUD_BASE    = $(notdir $(basename $(CLOUD_SOURCE) ) ) 


cloud: $(CLOUD_BASE)

cloud0:
	echo $(CLOUD_SOURCE)
	echo $(CLOUD_BIN)
	echo $(CLOUD_BASE)

%: %.cpp
	$(CC) $*.cpp -o $* $(OUTPUT_INCLUDEDIR) $(OPENCV_INCLUDEDIR) $(OPENCL_INCLUDEDIR) $(OUTPUT_LIBDIR) $(OPENCV_LIBDIR) $(OPENCV_LIBRARIES) -lvisiongl

#-L $(INSTALL_LIBPATH) -lvisiongl


#  $(OPENCV_LIBDIR) $(OPENCV_LIBRARIES) $(OPENCL_LIBDIR) $(OPENCL_LIBRARIES) $(OUTPUT_LIBDIR) -lvisiongl



lala:
	file := $(foreach file, $(files), echo $(file))
	export LINUXAMD64_CLOUD="$(CC) $(COMPILER_FLAGS) \
                        -o $(OUTPUT_BINPATH)/cloud/$(CLOUD_NAME) \
                         src/cloud/$(CLOUD_NAME).cpp \
                         -lvisiongl" 
	$(LINUXAMD64_CLOUD)

